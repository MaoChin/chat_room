// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voice_recognition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_voice_5frecognition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_voice_5frecognition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_voice_5frecognition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_voice_5frecognition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_voice_5frecognition_2eproto;
namespace my_chat {
class VoiceRecognitionReq;
class VoiceRecognitionReqDefaultTypeInternal;
extern VoiceRecognitionReqDefaultTypeInternal _VoiceRecognitionReq_default_instance_;
class VoiceRecognitionRsp;
class VoiceRecognitionRspDefaultTypeInternal;
extern VoiceRecognitionRspDefaultTypeInternal _VoiceRecognitionRsp_default_instance_;
}  // namespace my_chat
PROTOBUF_NAMESPACE_OPEN
template<> ::my_chat::VoiceRecognitionReq* Arena::CreateMaybeMessage<::my_chat::VoiceRecognitionReq>(Arena*);
template<> ::my_chat::VoiceRecognitionRsp* Arena::CreateMaybeMessage<::my_chat::VoiceRecognitionRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace my_chat {

// ===================================================================

class VoiceRecognitionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:my_chat.VoiceRecognitionReq) */ {
 public:
  inline VoiceRecognitionReq() : VoiceRecognitionReq(nullptr) {};
  virtual ~VoiceRecognitionReq();

  VoiceRecognitionReq(const VoiceRecognitionReq& from);
  VoiceRecognitionReq(VoiceRecognitionReq&& from) noexcept
    : VoiceRecognitionReq() {
    *this = ::std::move(from);
  }

  inline VoiceRecognitionReq& operator=(const VoiceRecognitionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceRecognitionReq& operator=(VoiceRecognitionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoiceRecognitionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceRecognitionReq* internal_default_instance() {
    return reinterpret_cast<const VoiceRecognitionReq*>(
               &_VoiceRecognitionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VoiceRecognitionReq& a, VoiceRecognitionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceRecognitionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceRecognitionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoiceRecognitionReq* New() const final {
    return CreateMaybeMessage<VoiceRecognitionReq>(nullptr);
  }

  VoiceRecognitionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoiceRecognitionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoiceRecognitionReq& from);
  void MergeFrom(const VoiceRecognitionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceRecognitionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "my_chat.VoiceRecognitionReq";
  }
  protected:
  explicit VoiceRecognitionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_5frecognition_2eproto);
    return ::descriptor_table_voice_5frecognition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kVoiceContentFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kSessionIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // bytes voice_content = 2;
  void clear_voice_content();
  const std::string& voice_content() const;
  void set_voice_content(const std::string& value);
  void set_voice_content(std::string&& value);
  void set_voice_content(const char* value);
  void set_voice_content(const void* value, size_t size);
  std::string* mutable_voice_content();
  std::string* release_voice_content();
  void set_allocated_voice_content(std::string* voice_content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_voice_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_voice_content(
      std::string* voice_content);
  private:
  const std::string& _internal_voice_content() const;
  void _internal_set_voice_content(const std::string& value);
  std::string* _internal_mutable_voice_content();
  public:

  // string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 4;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:my_chat.VoiceRecognitionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voice_content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_voice_5frecognition_2eproto;
};
// -------------------------------------------------------------------

class VoiceRecognitionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:my_chat.VoiceRecognitionRsp) */ {
 public:
  inline VoiceRecognitionRsp() : VoiceRecognitionRsp(nullptr) {};
  virtual ~VoiceRecognitionRsp();

  VoiceRecognitionRsp(const VoiceRecognitionRsp& from);
  VoiceRecognitionRsp(VoiceRecognitionRsp&& from) noexcept
    : VoiceRecognitionRsp() {
    *this = ::std::move(from);
  }

  inline VoiceRecognitionRsp& operator=(const VoiceRecognitionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceRecognitionRsp& operator=(VoiceRecognitionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoiceRecognitionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceRecognitionRsp* internal_default_instance() {
    return reinterpret_cast<const VoiceRecognitionRsp*>(
               &_VoiceRecognitionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VoiceRecognitionRsp& a, VoiceRecognitionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceRecognitionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceRecognitionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoiceRecognitionRsp* New() const final {
    return CreateMaybeMessage<VoiceRecognitionRsp>(nullptr);
  }

  VoiceRecognitionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoiceRecognitionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoiceRecognitionRsp& from);
  void MergeFrom(const VoiceRecognitionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceRecognitionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "my_chat.VoiceRecognitionRsp";
  }
  protected:
  explicit VoiceRecognitionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_5frecognition_2eproto);
    return ::descriptor_table_voice_5frecognition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kRecognitionResultFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string recognition_result = 4;
  void clear_recognition_result();
  const std::string& recognition_result() const;
  void set_recognition_result(const std::string& value);
  void set_recognition_result(std::string&& value);
  void set_recognition_result(const char* value);
  void set_recognition_result(const char* value, size_t size);
  std::string* mutable_recognition_result();
  std::string* release_recognition_result();
  void set_allocated_recognition_result(std::string* recognition_result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recognition_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recognition_result(
      std::string* recognition_result);
  private:
  const std::string& _internal_recognition_result() const;
  void _internal_set_recognition_result(const std::string& value);
  std::string* _internal_mutable_recognition_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:my_chat.VoiceRecognitionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recognition_result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_5frecognition_2eproto;
};
// ===================================================================

class VoiceService_Stub;

class VoiceService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline VoiceService() {};
 public:
  virtual ~VoiceService();

  typedef VoiceService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void VoiceRecognition(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::my_chat::VoiceRecognitionReq* request,
                       ::my_chat::VoiceRecognitionRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(VoiceService);
};

class VoiceService_Stub : public VoiceService {
 public:
  VoiceService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  VoiceService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~VoiceService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements VoiceService ------------------------------------------

  void VoiceRecognition(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::my_chat::VoiceRecognitionReq* request,
                       ::my_chat::VoiceRecognitionRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(VoiceService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoiceRecognitionReq

// string request_id = 1;
inline void VoiceRecognitionReq::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VoiceRecognitionReq::request_id() const {
  // @@protoc_insertion_point(field_get:my_chat.VoiceRecognitionReq.request_id)
  return _internal_request_id();
}
inline void VoiceRecognitionReq::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:my_chat.VoiceRecognitionReq.request_id)
}
inline std::string* VoiceRecognitionReq::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:my_chat.VoiceRecognitionReq.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& VoiceRecognitionReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void VoiceRecognitionReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VoiceRecognitionReq::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:my_chat.VoiceRecognitionReq.request_id)
}
inline void VoiceRecognitionReq::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:my_chat.VoiceRecognitionReq.request_id)
}
inline void VoiceRecognitionReq::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:my_chat.VoiceRecognitionReq.request_id)
}
inline std::string* VoiceRecognitionReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VoiceRecognitionReq::release_request_id() {
  // @@protoc_insertion_point(field_release:my_chat.VoiceRecognitionReq.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoiceRecognitionReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:my_chat.VoiceRecognitionReq.request_id)
}
inline std::string* VoiceRecognitionReq::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:my_chat.VoiceRecognitionReq.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VoiceRecognitionReq::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:my_chat.VoiceRecognitionReq.request_id)
}

// bytes voice_content = 2;
inline void VoiceRecognitionReq::clear_voice_content() {
  voice_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VoiceRecognitionReq::voice_content() const {
  // @@protoc_insertion_point(field_get:my_chat.VoiceRecognitionReq.voice_content)
  return _internal_voice_content();
}
inline void VoiceRecognitionReq::set_voice_content(const std::string& value) {
  _internal_set_voice_content(value);
  // @@protoc_insertion_point(field_set:my_chat.VoiceRecognitionReq.voice_content)
}
inline std::string* VoiceRecognitionReq::mutable_voice_content() {
  // @@protoc_insertion_point(field_mutable:my_chat.VoiceRecognitionReq.voice_content)
  return _internal_mutable_voice_content();
}
inline const std::string& VoiceRecognitionReq::_internal_voice_content() const {
  return voice_content_.Get();
}
inline void VoiceRecognitionReq::_internal_set_voice_content(const std::string& value) {
  
  voice_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VoiceRecognitionReq::set_voice_content(std::string&& value) {
  
  voice_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:my_chat.VoiceRecognitionReq.voice_content)
}
inline void VoiceRecognitionReq::set_voice_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voice_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:my_chat.VoiceRecognitionReq.voice_content)
}
inline void VoiceRecognitionReq::set_voice_content(const void* value,
    size_t size) {
  
  voice_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:my_chat.VoiceRecognitionReq.voice_content)
}
inline std::string* VoiceRecognitionReq::_internal_mutable_voice_content() {
  
  return voice_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VoiceRecognitionReq::release_voice_content() {
  // @@protoc_insertion_point(field_release:my_chat.VoiceRecognitionReq.voice_content)
  return voice_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoiceRecognitionReq::set_allocated_voice_content(std::string* voice_content) {
  if (voice_content != nullptr) {
    
  } else {
    
  }
  voice_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voice_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:my_chat.VoiceRecognitionReq.voice_content)
}
inline std::string* VoiceRecognitionReq::unsafe_arena_release_voice_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:my_chat.VoiceRecognitionReq.voice_content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return voice_content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VoiceRecognitionReq::unsafe_arena_set_allocated_voice_content(
    std::string* voice_content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (voice_content != nullptr) {
    
  } else {
    
  }
  voice_content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      voice_content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:my_chat.VoiceRecognitionReq.voice_content)
}

// string user_id = 3;
inline bool VoiceRecognitionReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VoiceRecognitionReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void VoiceRecognitionReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VoiceRecognitionReq::user_id() const {
  // @@protoc_insertion_point(field_get:my_chat.VoiceRecognitionReq.user_id)
  return _internal_user_id();
}
inline void VoiceRecognitionReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:my_chat.VoiceRecognitionReq.user_id)
}
inline std::string* VoiceRecognitionReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:my_chat.VoiceRecognitionReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& VoiceRecognitionReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void VoiceRecognitionReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VoiceRecognitionReq::set_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:my_chat.VoiceRecognitionReq.user_id)
}
inline void VoiceRecognitionReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:my_chat.VoiceRecognitionReq.user_id)
}
inline void VoiceRecognitionReq::set_user_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:my_chat.VoiceRecognitionReq.user_id)
}
inline std::string* VoiceRecognitionReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VoiceRecognitionReq::release_user_id() {
  // @@protoc_insertion_point(field_release:my_chat.VoiceRecognitionReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoiceRecognitionReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:my_chat.VoiceRecognitionReq.user_id)
}
inline std::string* VoiceRecognitionReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:my_chat.VoiceRecognitionReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VoiceRecognitionReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:my_chat.VoiceRecognitionReq.user_id)
}

// string session_id = 4;
inline bool VoiceRecognitionReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VoiceRecognitionReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void VoiceRecognitionReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VoiceRecognitionReq::session_id() const {
  // @@protoc_insertion_point(field_get:my_chat.VoiceRecognitionReq.session_id)
  return _internal_session_id();
}
inline void VoiceRecognitionReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:my_chat.VoiceRecognitionReq.session_id)
}
inline std::string* VoiceRecognitionReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:my_chat.VoiceRecognitionReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& VoiceRecognitionReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void VoiceRecognitionReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VoiceRecognitionReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:my_chat.VoiceRecognitionReq.session_id)
}
inline void VoiceRecognitionReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:my_chat.VoiceRecognitionReq.session_id)
}
inline void VoiceRecognitionReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:my_chat.VoiceRecognitionReq.session_id)
}
inline std::string* VoiceRecognitionReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VoiceRecognitionReq::release_session_id() {
  // @@protoc_insertion_point(field_release:my_chat.VoiceRecognitionReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoiceRecognitionReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:my_chat.VoiceRecognitionReq.session_id)
}
inline std::string* VoiceRecognitionReq::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:my_chat.VoiceRecognitionReq.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VoiceRecognitionReq::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:my_chat.VoiceRecognitionReq.session_id)
}

// -------------------------------------------------------------------

// VoiceRecognitionRsp

// string request_id = 1;
inline void VoiceRecognitionRsp::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VoiceRecognitionRsp::request_id() const {
  // @@protoc_insertion_point(field_get:my_chat.VoiceRecognitionRsp.request_id)
  return _internal_request_id();
}
inline void VoiceRecognitionRsp::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:my_chat.VoiceRecognitionRsp.request_id)
}
inline std::string* VoiceRecognitionRsp::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:my_chat.VoiceRecognitionRsp.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& VoiceRecognitionRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void VoiceRecognitionRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VoiceRecognitionRsp::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:my_chat.VoiceRecognitionRsp.request_id)
}
inline void VoiceRecognitionRsp::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:my_chat.VoiceRecognitionRsp.request_id)
}
inline void VoiceRecognitionRsp::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:my_chat.VoiceRecognitionRsp.request_id)
}
inline std::string* VoiceRecognitionRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VoiceRecognitionRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:my_chat.VoiceRecognitionRsp.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoiceRecognitionRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:my_chat.VoiceRecognitionRsp.request_id)
}
inline std::string* VoiceRecognitionRsp::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:my_chat.VoiceRecognitionRsp.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VoiceRecognitionRsp::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:my_chat.VoiceRecognitionRsp.request_id)
}

// bool success = 2;
inline void VoiceRecognitionRsp::clear_success() {
  success_ = false;
}
inline bool VoiceRecognitionRsp::_internal_success() const {
  return success_;
}
inline bool VoiceRecognitionRsp::success() const {
  // @@protoc_insertion_point(field_get:my_chat.VoiceRecognitionRsp.success)
  return _internal_success();
}
inline void VoiceRecognitionRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void VoiceRecognitionRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:my_chat.VoiceRecognitionRsp.success)
}

// string errmsg = 3;
inline void VoiceRecognitionRsp::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VoiceRecognitionRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:my_chat.VoiceRecognitionRsp.errmsg)
  return _internal_errmsg();
}
inline void VoiceRecognitionRsp::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:my_chat.VoiceRecognitionRsp.errmsg)
}
inline std::string* VoiceRecognitionRsp::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:my_chat.VoiceRecognitionRsp.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& VoiceRecognitionRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void VoiceRecognitionRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VoiceRecognitionRsp::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:my_chat.VoiceRecognitionRsp.errmsg)
}
inline void VoiceRecognitionRsp::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:my_chat.VoiceRecognitionRsp.errmsg)
}
inline void VoiceRecognitionRsp::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:my_chat.VoiceRecognitionRsp.errmsg)
}
inline std::string* VoiceRecognitionRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VoiceRecognitionRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:my_chat.VoiceRecognitionRsp.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoiceRecognitionRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:my_chat.VoiceRecognitionRsp.errmsg)
}
inline std::string* VoiceRecognitionRsp::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:my_chat.VoiceRecognitionRsp.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VoiceRecognitionRsp::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:my_chat.VoiceRecognitionRsp.errmsg)
}

// string recognition_result = 4;
inline void VoiceRecognitionRsp::clear_recognition_result() {
  recognition_result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VoiceRecognitionRsp::recognition_result() const {
  // @@protoc_insertion_point(field_get:my_chat.VoiceRecognitionRsp.recognition_result)
  return _internal_recognition_result();
}
inline void VoiceRecognitionRsp::set_recognition_result(const std::string& value) {
  _internal_set_recognition_result(value);
  // @@protoc_insertion_point(field_set:my_chat.VoiceRecognitionRsp.recognition_result)
}
inline std::string* VoiceRecognitionRsp::mutable_recognition_result() {
  // @@protoc_insertion_point(field_mutable:my_chat.VoiceRecognitionRsp.recognition_result)
  return _internal_mutable_recognition_result();
}
inline const std::string& VoiceRecognitionRsp::_internal_recognition_result() const {
  return recognition_result_.Get();
}
inline void VoiceRecognitionRsp::_internal_set_recognition_result(const std::string& value) {
  
  recognition_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VoiceRecognitionRsp::set_recognition_result(std::string&& value) {
  
  recognition_result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:my_chat.VoiceRecognitionRsp.recognition_result)
}
inline void VoiceRecognitionRsp::set_recognition_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recognition_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:my_chat.VoiceRecognitionRsp.recognition_result)
}
inline void VoiceRecognitionRsp::set_recognition_result(const char* value,
    size_t size) {
  
  recognition_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:my_chat.VoiceRecognitionRsp.recognition_result)
}
inline std::string* VoiceRecognitionRsp::_internal_mutable_recognition_result() {
  
  return recognition_result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VoiceRecognitionRsp::release_recognition_result() {
  // @@protoc_insertion_point(field_release:my_chat.VoiceRecognitionRsp.recognition_result)
  return recognition_result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoiceRecognitionRsp::set_allocated_recognition_result(std::string* recognition_result) {
  if (recognition_result != nullptr) {
    
  } else {
    
  }
  recognition_result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recognition_result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:my_chat.VoiceRecognitionRsp.recognition_result)
}
inline std::string* VoiceRecognitionRsp::unsafe_arena_release_recognition_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:my_chat.VoiceRecognitionRsp.recognition_result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recognition_result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VoiceRecognitionRsp::unsafe_arena_set_allocated_recognition_result(
    std::string* recognition_result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recognition_result != nullptr) {
    
  } else {
    
  }
  recognition_result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recognition_result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:my_chat.VoiceRecognitionRsp.recognition_result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace my_chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_voice_5frecognition_2eproto
