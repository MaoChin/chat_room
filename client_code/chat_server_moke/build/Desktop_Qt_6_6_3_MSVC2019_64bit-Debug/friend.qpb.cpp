/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "friend.qpb.h"
#include <QtProtobuf/qprotobufserializer.h>

namespace my_chat_proto {

class GetFriendListReq_QtProtobufData : public QSharedData
{
public:
    GetFriendListReq_QtProtobufData()
        : QSharedData()
    {
    }

    GetFriendListReq_QtProtobufData(const GetFriendListReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId)
    {
    }

    QString m_requestId;
    QString m_userId;
    QString m_sessionId;
};

GetFriendListReq::~GetFriendListReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_GetFriendListReq_uint_data;
    const char qt_protobuf_GetFriendListReq_char_data[59];
} qt_protobuf_GetFriendListReq_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        30, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        31, /* = requestId */
        41, /* = userId */
        48, /* = sessionId */
        58, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        2, /* = sessionId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = userId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetFriendListReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetFriendListReq::propertyOrdering = {
    &qt_protobuf_GetFriendListReq_metadata.data
};

void GetFriendListReq::registerTypes()
{
    qRegisterMetaType<GetFriendListReq>();
    qRegisterMetaType<GetFriendListReqRepeated>();
}

GetFriendListReq::GetFriendListReq()
    : QProtobufMessage(&GetFriendListReq::staticMetaObject),
      dptr(new GetFriendListReq_QtProtobufData)
{
}

GetFriendListReq::GetFriendListReq(const GetFriendListReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetFriendListReq &GetFriendListReq::operator =(const GetFriendListReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetFriendListReq::GetFriendListReq(GetFriendListReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetFriendListReq &GetFriendListReq::operator =(GetFriendListReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetFriendListReq::operator ==(const GetFriendListReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId;
}

bool GetFriendListReq::operator !=(const GetFriendListReq &other) const
{
    return !this->operator ==(other);
}

QString GetFriendListReq::requestId() const
{
    return dptr->m_requestId;
}

QString GetFriendListReq::userId() const
{
    return dptr->m_userId;
}

QString GetFriendListReq::sessionId() const
{
    return dptr->m_sessionId;
}

void GetFriendListReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetFriendListReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetFriendListReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}


class GetFriendListRsp_QtProtobufData : public QSharedData
{
public:
    GetFriendListRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    GetFriendListRsp_QtProtobufData(const GetFriendListRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_friendList(other.m_friendList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    UserInfoRepeated m_friendList;
};

GetFriendListRsp::~GetFriendListRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetFriendListRsp_uint_data;
    const char qt_protobuf_GetFriendListRsp_char_data[68];
} qt_protobuf_GetFriendListRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        30, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        31, /* = requestId */
        41, /* = success */
        49, /* = errmsg */
        56, /* = friendList */
        67, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = friendList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = friendList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = friendList */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetFriendListRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0friendList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetFriendListRsp::propertyOrdering = {
    &qt_protobuf_GetFriendListRsp_metadata.data
};

void GetFriendListRsp::registerTypes()
{
    qRegisterMetaType<GetFriendListRsp>();
    qRegisterMetaType<GetFriendListRspRepeated>();
}

GetFriendListRsp::GetFriendListRsp()
    : QProtobufMessage(&GetFriendListRsp::staticMetaObject),
      dptr(new GetFriendListRsp_QtProtobufData)
{
}

GetFriendListRsp::GetFriendListRsp(const GetFriendListRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetFriendListRsp &GetFriendListRsp::operator =(const GetFriendListRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetFriendListRsp::GetFriendListRsp(GetFriendListRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetFriendListRsp &GetFriendListRsp::operator =(GetFriendListRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetFriendListRsp::operator ==(const GetFriendListRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && QtProtobuf::repeatedValueCompare(dptr->m_friendList, other.dptr->m_friendList);
}

bool GetFriendListRsp::operator !=(const GetFriendListRsp &other) const
{
    return !this->operator ==(other);
}

QString GetFriendListRsp::requestId() const
{
    return dptr->m_requestId;
}

bool GetFriendListRsp::success() const
{
    return dptr->m_success;
}

QString GetFriendListRsp::errmsg() const
{
    return dptr->m_errmsg;
}

UserInfoRepeated GetFriendListRsp::friendList() const
{
    return dptr->m_friendList;
}

UserInfoRepeated &GetFriendListRsp::friendList()
{
    dptr.detach();
    return dptr->m_friendList;
}

void GetFriendListRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetFriendListRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetFriendListRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetFriendListRsp::setFriendList(const UserInfoRepeated &friendList)
{
    if (dptr->m_friendList != friendList) {
        dptr.detach();
        dptr->m_friendList = friendList;
    }
}


class FriendRemoveReq_QtProtobufData : public QSharedData
{
public:
    FriendRemoveReq_QtProtobufData()
        : QSharedData()
    {
    }

    FriendRemoveReq_QtProtobufData(const FriendRemoveReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_peerId(other.m_peerId)
    {
    }

    QString m_requestId;
    QString m_userId;
    QString m_sessionId;
    QString m_peerId;
};

FriendRemoveReq::~FriendRemoveReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_FriendRemoveReq_uint_data;
    const char qt_protobuf_FriendRemoveReq_char_data[65];
} qt_protobuf_FriendRemoveReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = userId */
        47, /* = sessionId */
        57, /* = peerId */
        64, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = peerId */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        2, /* = sessionId */
        3, /* = peerId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = userId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = peerId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.FriendRemoveReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0peerId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering FriendRemoveReq::propertyOrdering = {
    &qt_protobuf_FriendRemoveReq_metadata.data
};

void FriendRemoveReq::registerTypes()
{
    qRegisterMetaType<FriendRemoveReq>();
    qRegisterMetaType<FriendRemoveReqRepeated>();
}

FriendRemoveReq::FriendRemoveReq()
    : QProtobufMessage(&FriendRemoveReq::staticMetaObject),
      dptr(new FriendRemoveReq_QtProtobufData)
{
}

FriendRemoveReq::FriendRemoveReq(const FriendRemoveReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
FriendRemoveReq &FriendRemoveReq::operator =(const FriendRemoveReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
FriendRemoveReq::FriendRemoveReq(FriendRemoveReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
FriendRemoveReq &FriendRemoveReq::operator =(FriendRemoveReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool FriendRemoveReq::operator ==(const FriendRemoveReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_peerId == other.dptr->m_peerId;
}

bool FriendRemoveReq::operator !=(const FriendRemoveReq &other) const
{
    return !this->operator ==(other);
}

QString FriendRemoveReq::requestId() const
{
    return dptr->m_requestId;
}

QString FriendRemoveReq::userId() const
{
    return dptr->m_userId;
}

QString FriendRemoveReq::sessionId() const
{
    return dptr->m_sessionId;
}

QString FriendRemoveReq::peerId() const
{
    return dptr->m_peerId;
}

void FriendRemoveReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void FriendRemoveReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void FriendRemoveReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void FriendRemoveReq::setPeerId(const QString &peerId)
{
    if (dptr->m_peerId != peerId) {
        dptr.detach();
        dptr->m_peerId = peerId;
    }
}


class FriendRemoveRsp_QtProtobufData : public QSharedData
{
public:
    FriendRemoveRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    FriendRemoveRsp_QtProtobufData(const FriendRemoveRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
};

FriendRemoveRsp::~FriendRemoveRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_FriendRemoveRsp_uint_data;
    const char qt_protobuf_FriendRemoveRsp_char_data[56];
} qt_protobuf_FriendRemoveRsp_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = success */
        48, /* = errmsg */
        55, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.FriendRemoveRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering FriendRemoveRsp::propertyOrdering = {
    &qt_protobuf_FriendRemoveRsp_metadata.data
};

void FriendRemoveRsp::registerTypes()
{
    qRegisterMetaType<FriendRemoveRsp>();
    qRegisterMetaType<FriendRemoveRspRepeated>();
}

FriendRemoveRsp::FriendRemoveRsp()
    : QProtobufMessage(&FriendRemoveRsp::staticMetaObject),
      dptr(new FriendRemoveRsp_QtProtobufData)
{
}

FriendRemoveRsp::FriendRemoveRsp(const FriendRemoveRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
FriendRemoveRsp &FriendRemoveRsp::operator =(const FriendRemoveRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
FriendRemoveRsp::FriendRemoveRsp(FriendRemoveRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
FriendRemoveRsp &FriendRemoveRsp::operator =(FriendRemoveRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool FriendRemoveRsp::operator ==(const FriendRemoveRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool FriendRemoveRsp::operator !=(const FriendRemoveRsp &other) const
{
    return !this->operator ==(other);
}

QString FriendRemoveRsp::requestId() const
{
    return dptr->m_requestId;
}

bool FriendRemoveRsp::success() const
{
    return dptr->m_success;
}

QString FriendRemoveRsp::errmsg() const
{
    return dptr->m_errmsg;
}

void FriendRemoveRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void FriendRemoveRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void FriendRemoveRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}


class FriendAddReq_QtProtobufData : public QSharedData
{
public:
    FriendAddReq_QtProtobufData()
        : QSharedData()
    {
    }

    FriendAddReq_QtProtobufData(const FriendAddReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_sessionId(other.m_sessionId),
          m_userId(other.m_userId),
          m_respondentId(other.m_respondentId)
    {
    }

    QString m_requestId;
    QString m_sessionId;
    QString m_userId;
    QString m_respondentId;
};

FriendAddReq::~FriendAddReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_FriendAddReq_uint_data;
    const char qt_protobuf_FriendAddReq_char_data[68];
} qt_protobuf_FriendAddReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = requestId */
        37, /* = sessionId */
        47, /* = userId */
        54, /* = respondentId */
        67, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = sessionId */
        3, /* = userId */
        4, /* = respondentId */
        // Property indices:
        0, /* = requestId */
        1, /* = sessionId */
        2, /* = userId */
        3, /* = respondentId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = userId */
        QtProtobufPrivate::NoFlags, /* = respondentId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.FriendAddReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0sessionId\0userId\0respondentId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering FriendAddReq::propertyOrdering = {
    &qt_protobuf_FriendAddReq_metadata.data
};

void FriendAddReq::registerTypes()
{
    qRegisterMetaType<FriendAddReq>();
    qRegisterMetaType<FriendAddReqRepeated>();
}

FriendAddReq::FriendAddReq()
    : QProtobufMessage(&FriendAddReq::staticMetaObject),
      dptr(new FriendAddReq_QtProtobufData)
{
}

FriendAddReq::FriendAddReq(const FriendAddReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
FriendAddReq &FriendAddReq::operator =(const FriendAddReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
FriendAddReq::FriendAddReq(FriendAddReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
FriendAddReq &FriendAddReq::operator =(FriendAddReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool FriendAddReq::operator ==(const FriendAddReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_respondentId == other.dptr->m_respondentId;
}

bool FriendAddReq::operator !=(const FriendAddReq &other) const
{
    return !this->operator ==(other);
}

QString FriendAddReq::requestId() const
{
    return dptr->m_requestId;
}

QString FriendAddReq::sessionId() const
{
    return dptr->m_sessionId;
}

QString FriendAddReq::userId() const
{
    return dptr->m_userId;
}

QString FriendAddReq::respondentId() const
{
    return dptr->m_respondentId;
}

void FriendAddReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void FriendAddReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void FriendAddReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void FriendAddReq::setRespondentId(const QString &respondentId)
{
    if (dptr->m_respondentId != respondentId) {
        dptr.detach();
        dptr->m_respondentId = respondentId;
    }
}


class FriendAddRsp_QtProtobufData : public QSharedData
{
public:
    FriendAddRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    FriendAddRsp_QtProtobufData(const FriendAddRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_notifyEventId(other.m_notifyEventId)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QString m_notifyEventId;
};

FriendAddRsp::~FriendAddRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_FriendAddRsp_uint_data;
    const char qt_protobuf_FriendAddRsp_char_data[67];
} qt_protobuf_FriendAddRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = requestId */
        37, /* = success */
        45, /* = errmsg */
        52, /* = notifyEventId */
        66, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = notifyEventId */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = notifyEventId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = notifyEventId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.FriendAddRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0notifyEventId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering FriendAddRsp::propertyOrdering = {
    &qt_protobuf_FriendAddRsp_metadata.data
};

void FriendAddRsp::registerTypes()
{
    qRegisterMetaType<FriendAddRsp>();
    qRegisterMetaType<FriendAddRspRepeated>();
}

FriendAddRsp::FriendAddRsp()
    : QProtobufMessage(&FriendAddRsp::staticMetaObject),
      dptr(new FriendAddRsp_QtProtobufData)
{
}

FriendAddRsp::FriendAddRsp(const FriendAddRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
FriendAddRsp &FriendAddRsp::operator =(const FriendAddRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
FriendAddRsp::FriendAddRsp(FriendAddRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
FriendAddRsp &FriendAddRsp::operator =(FriendAddRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool FriendAddRsp::operator ==(const FriendAddRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && dptr->m_notifyEventId == other.dptr->m_notifyEventId;
}

bool FriendAddRsp::operator !=(const FriendAddRsp &other) const
{
    return !this->operator ==(other);
}

QString FriendAddRsp::requestId() const
{
    return dptr->m_requestId;
}

bool FriendAddRsp::success() const
{
    return dptr->m_success;
}

QString FriendAddRsp::errmsg() const
{
    return dptr->m_errmsg;
}

QString FriendAddRsp::notifyEventId() const
{
    return dptr->m_notifyEventId;
}

void FriendAddRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void FriendAddRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void FriendAddRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void FriendAddRsp::setNotifyEventId(const QString &notifyEventId)
{
    if (dptr->m_notifyEventId != notifyEventId) {
        dptr.detach();
        dptr->m_notifyEventId = notifyEventId;
    }
}


class FriendAddProcessReq_QtProtobufData : public QSharedData
{
public:
    FriendAddProcessReq_QtProtobufData()
        : QSharedData(),
          m_agree(false)
    {
    }

    FriendAddProcessReq_QtProtobufData(const FriendAddProcessReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_notifyEventId(other.m_notifyEventId),
          m_agree(other.m_agree),
          m_applyUserId(other.m_applyUserId),
          m_sessionId(other.m_sessionId),
          m_userId(other.m_userId)
    {
    }

    QString m_requestId;
    QString m_notifyEventId;
    bool m_agree;
    QString m_applyUserId;
    QString m_sessionId;
    QString m_userId;
};

FriendAddProcessReq::~FriendAddProcessReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 25> qt_protobuf_FriendAddProcessReq_uint_data;
    const char qt_protobuf_FriendAddProcessReq_char_data[94];
} qt_protobuf_FriendAddProcessReq_metadata {
    // data
    {
        0, /* = version */
        6, /* = num fields */
        7, /* = field number offset */
        13, /* = property index offset */
        19, /* = field flags offset */
        33, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        34, /* = requestId */
        44, /* = notifyEventId */
        58, /* = agree */
        64, /* = applyUserId */
        76, /* = sessionId */
        86, /* = userId */
        93, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = notifyEventId */
        3, /* = agree */
        4, /* = applyUserId */
        5, /* = sessionId */
        6, /* = userId */
        // Property indices:
        0, /* = requestId */
        1, /* = notifyEventId */
        2, /* = agree */
        3, /* = applyUserId */
        4, /* = sessionId */
        5, /* = userId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = notifyEventId */
        QtProtobufPrivate::NoFlags, /* = agree */
        QtProtobufPrivate::NoFlags, /* = applyUserId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = userId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.FriendAddProcessReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0notifyEventId\0agree\0applyUserId\0sessionId\0"
    "userId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering FriendAddProcessReq::propertyOrdering = {
    &qt_protobuf_FriendAddProcessReq_metadata.data
};

void FriendAddProcessReq::registerTypes()
{
    qRegisterMetaType<FriendAddProcessReq>();
    qRegisterMetaType<FriendAddProcessReqRepeated>();
}

FriendAddProcessReq::FriendAddProcessReq()
    : QProtobufMessage(&FriendAddProcessReq::staticMetaObject),
      dptr(new FriendAddProcessReq_QtProtobufData)
{
}

FriendAddProcessReq::FriendAddProcessReq(const FriendAddProcessReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
FriendAddProcessReq &FriendAddProcessReq::operator =(const FriendAddProcessReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
FriendAddProcessReq::FriendAddProcessReq(FriendAddProcessReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
FriendAddProcessReq &FriendAddProcessReq::operator =(FriendAddProcessReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool FriendAddProcessReq::operator ==(const FriendAddProcessReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_notifyEventId == other.dptr->m_notifyEventId
        && dptr->m_agree == other.dptr->m_agree
        && dptr->m_applyUserId == other.dptr->m_applyUserId;
}

bool FriendAddProcessReq::operator !=(const FriendAddProcessReq &other) const
{
    return !this->operator ==(other);
}

QString FriendAddProcessReq::requestId() const
{
    return dptr->m_requestId;
}

QString FriendAddProcessReq::notifyEventId() const
{
    return dptr->m_notifyEventId;
}

bool FriendAddProcessReq::agree() const
{
    return dptr->m_agree;
}

QString FriendAddProcessReq::applyUserId() const
{
    return dptr->m_applyUserId;
}

QString FriendAddProcessReq::sessionId() const
{
    return dptr->m_sessionId;
}

QString FriendAddProcessReq::userId() const
{
    return dptr->m_userId;
}

void FriendAddProcessReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void FriendAddProcessReq::setNotifyEventId(const QString &notifyEventId)
{
    if (dptr->m_notifyEventId != notifyEventId) {
        dptr.detach();
        dptr->m_notifyEventId = notifyEventId;
    }
}

void FriendAddProcessReq::setAgree(const bool &agree)
{
    if (dptr->m_agree != agree) {
        dptr.detach();
        dptr->m_agree = agree;
    }
}

void FriendAddProcessReq::setApplyUserId(const QString &applyUserId)
{
    if (dptr->m_applyUserId != applyUserId) {
        dptr.detach();
        dptr->m_applyUserId = applyUserId;
    }
}

void FriendAddProcessReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void FriendAddProcessReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}


class FriendAddProcessRsp_QtProtobufData : public QSharedData
{
public:
    FriendAddProcessRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    FriendAddProcessRsp_QtProtobufData(const FriendAddProcessRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_newSessionId(other.m_newSessionId)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QString m_newSessionId;
};

FriendAddProcessRsp::~FriendAddProcessRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_FriendAddProcessRsp_uint_data;
    const char qt_protobuf_FriendAddProcessRsp_char_data[73];
} qt_protobuf_FriendAddProcessRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        33, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        34, /* = requestId */
        44, /* = success */
        52, /* = errmsg */
        59, /* = newSessionId */
        72, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = newSessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = newSessionId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = newSessionId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.FriendAddProcessRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0newSessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering FriendAddProcessRsp::propertyOrdering = {
    &qt_protobuf_FriendAddProcessRsp_metadata.data
};

void FriendAddProcessRsp::registerTypes()
{
    qRegisterMetaType<FriendAddProcessRsp>();
    qRegisterMetaType<FriendAddProcessRspRepeated>();
}

FriendAddProcessRsp::FriendAddProcessRsp()
    : QProtobufMessage(&FriendAddProcessRsp::staticMetaObject),
      dptr(new FriendAddProcessRsp_QtProtobufData)
{
}

FriendAddProcessRsp::FriendAddProcessRsp(const FriendAddProcessRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
FriendAddProcessRsp &FriendAddProcessRsp::operator =(const FriendAddProcessRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
FriendAddProcessRsp::FriendAddProcessRsp(FriendAddProcessRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
FriendAddProcessRsp &FriendAddProcessRsp::operator =(FriendAddProcessRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool FriendAddProcessRsp::operator ==(const FriendAddProcessRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool FriendAddProcessRsp::operator !=(const FriendAddProcessRsp &other) const
{
    return !this->operator ==(other);
}

QString FriendAddProcessRsp::requestId() const
{
    return dptr->m_requestId;
}

bool FriendAddProcessRsp::success() const
{
    return dptr->m_success;
}

QString FriendAddProcessRsp::errmsg() const
{
    return dptr->m_errmsg;
}

QString FriendAddProcessRsp::newSessionId() const
{
    return dptr->m_newSessionId;
}

void FriendAddProcessRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void FriendAddProcessRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void FriendAddProcessRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void FriendAddProcessRsp::setNewSessionId(const QString &newSessionId)
{
    if (dptr->m_newSessionId != newSessionId) {
        dptr.detach();
        dptr->m_newSessionId = newSessionId;
    }
}


class GetPendingFriendEventListReq_QtProtobufData : public QSharedData
{
public:
    GetPendingFriendEventListReq_QtProtobufData()
        : QSharedData()
    {
    }

    GetPendingFriendEventListReq_QtProtobufData(const GetPendingFriendEventListReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_sessionId(other.m_sessionId),
          m_userId(other.m_userId)
    {
    }

    QString m_requestId;
    QString m_sessionId;
    QString m_userId;
};

GetPendingFriendEventListReq::~GetPendingFriendEventListReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_GetPendingFriendEventListReq_uint_data;
    const char qt_protobuf_GetPendingFriendEventListReq_char_data[71];
} qt_protobuf_GetPendingFriendEventListReq_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        42, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        43, /* = requestId */
        53, /* = sessionId */
        63, /* = userId */
        70, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = sessionId */
        3, /* = userId */
        // Property indices:
        0, /* = requestId */
        1, /* = sessionId */
        2, /* = userId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = userId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetPendingFriendEventListReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0sessionId\0userId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetPendingFriendEventListReq::propertyOrdering = {
    &qt_protobuf_GetPendingFriendEventListReq_metadata.data
};

void GetPendingFriendEventListReq::registerTypes()
{
    qRegisterMetaType<GetPendingFriendEventListReq>();
    qRegisterMetaType<GetPendingFriendEventListReqRepeated>();
}

GetPendingFriendEventListReq::GetPendingFriendEventListReq()
    : QProtobufMessage(&GetPendingFriendEventListReq::staticMetaObject),
      dptr(new GetPendingFriendEventListReq_QtProtobufData)
{
}

GetPendingFriendEventListReq::GetPendingFriendEventListReq(const GetPendingFriendEventListReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetPendingFriendEventListReq &GetPendingFriendEventListReq::operator =(const GetPendingFriendEventListReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetPendingFriendEventListReq::GetPendingFriendEventListReq(GetPendingFriendEventListReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetPendingFriendEventListReq &GetPendingFriendEventListReq::operator =(GetPendingFriendEventListReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetPendingFriendEventListReq::operator ==(const GetPendingFriendEventListReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId;
}

bool GetPendingFriendEventListReq::operator !=(const GetPendingFriendEventListReq &other) const
{
    return !this->operator ==(other);
}

QString GetPendingFriendEventListReq::requestId() const
{
    return dptr->m_requestId;
}

QString GetPendingFriendEventListReq::sessionId() const
{
    return dptr->m_sessionId;
}

QString GetPendingFriendEventListReq::userId() const
{
    return dptr->m_userId;
}

void GetPendingFriendEventListReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetPendingFriendEventListReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetPendingFriendEventListReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}


class FriendEvent_QtProtobufData : public QSharedData
{
public:
    FriendEvent_QtProtobufData()
        : QSharedData(),
          m_sender(nullptr)
    {
    }

    FriendEvent_QtProtobufData(const FriendEvent_QtProtobufData &other)
        : QSharedData(other),
          m_eventId(other.m_eventId),
          m_sender(other.m_sender
                                               ? new UserInfo(*other.m_sender)
                                               : nullptr)
    {
    }

    QString m_eventId;
    QtProtobufPrivate::QProtobufLazyMessagePointer<UserInfo> m_sender;
};

FriendEvent::~FriendEvent() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 9> qt_protobuf_FriendEvent_uint_data;
    const char qt_protobuf_FriendEvent_char_data[42];
} qt_protobuf_FriendEvent_metadata {
    // data
    {
        0, /* = version */
        2, /* = num fields */
        3, /* = field number offset */
        5, /* = property index offset */
        7, /* = field flags offset */
        25, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        26, /* = eventId */
        34, /* = sender */
        41, /* = end-of-string-marker */
        // Field numbers:
        1, /* = eventId */
        3, /* = sender */
        // Property indices:
        0, /* = eventId */
        1, /* = sender */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = eventId */
        QtProtobufPrivate::NoFlags, /* = sender */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.FriendEvent\0" /* = full message name */
    /* field char_data: */
    "eventId\0sender\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering FriendEvent::propertyOrdering = {
    &qt_protobuf_FriendEvent_metadata.data
};

void FriendEvent::registerTypes()
{
    qRegisterMetaType<FriendEvent>();
    qRegisterMetaType<FriendEventRepeated>();
}

FriendEvent::FriendEvent()
    : QProtobufMessage(&FriendEvent::staticMetaObject),
      dptr(new FriendEvent_QtProtobufData)
{
}

FriendEvent::FriendEvent(const FriendEvent &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
FriendEvent &FriendEvent::operator =(const FriendEvent &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
FriendEvent::FriendEvent(FriendEvent &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
FriendEvent &FriendEvent::operator =(FriendEvent &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool FriendEvent::operator ==(const FriendEvent &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_eventId == other.dptr->m_eventId
        && (dptr->m_sender == other.dptr->m_sender
            || *dptr->m_sender == *other.dptr->m_sender);
}

bool FriendEvent::operator !=(const FriendEvent &other) const
{
    return !this->operator ==(other);
}

QString FriendEvent::eventId() const
{
    return dptr->m_eventId;
}

UserInfo *FriendEvent::sender_p() const
{
    return dptr->m_sender ? dptr->m_sender.get() : nullptr;
}

UserInfo &FriendEvent::sender() const
{
    return *dptr->m_sender;
}

void FriendEvent::setEventId(const QString &eventId)
{
    if (dptr->m_eventId != eventId) {
        dptr.detach();
        dptr->m_eventId = eventId;
    }
}

void FriendEvent::setSender_p(UserInfo *sender)
{
    if (dptr->m_sender.get() != sender) {
        dptr.detach();
        dptr->m_sender.reset(sender);
    }
}

void FriendEvent::setSender(const UserInfo &sender)
{
    if (*dptr->m_sender != sender) {
        dptr.detach();
        *dptr->m_sender = sender;
    }
}


class GetPendingFriendEventListRsp_QtProtobufData : public QSharedData
{
public:
    GetPendingFriendEventListRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    GetPendingFriendEventListRsp_QtProtobufData(const GetPendingFriendEventListRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_event(other.m_event)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    FriendEventRepeated m_event;
};

GetPendingFriendEventListRsp::~GetPendingFriendEventListRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetPendingFriendEventListRsp_uint_data;
    const char qt_protobuf_GetPendingFriendEventListRsp_char_data[75];
} qt_protobuf_GetPendingFriendEventListRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        42, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        43, /* = requestId */
        53, /* = success */
        61, /* = errmsg */
        68, /* = event */
        74, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = event */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = event */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = event */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetPendingFriendEventListRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0event\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetPendingFriendEventListRsp::propertyOrdering = {
    &qt_protobuf_GetPendingFriendEventListRsp_metadata.data
};

void GetPendingFriendEventListRsp::registerTypes()
{
    qRegisterMetaType<GetPendingFriendEventListRsp>();
    qRegisterMetaType<GetPendingFriendEventListRspRepeated>();
}

GetPendingFriendEventListRsp::GetPendingFriendEventListRsp()
    : QProtobufMessage(&GetPendingFriendEventListRsp::staticMetaObject),
      dptr(new GetPendingFriendEventListRsp_QtProtobufData)
{
}

GetPendingFriendEventListRsp::GetPendingFriendEventListRsp(const GetPendingFriendEventListRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetPendingFriendEventListRsp &GetPendingFriendEventListRsp::operator =(const GetPendingFriendEventListRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetPendingFriendEventListRsp::GetPendingFriendEventListRsp(GetPendingFriendEventListRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetPendingFriendEventListRsp &GetPendingFriendEventListRsp::operator =(GetPendingFriendEventListRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetPendingFriendEventListRsp::operator ==(const GetPendingFriendEventListRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && QtProtobuf::repeatedValueCompare(dptr->m_event, other.dptr->m_event);
}

bool GetPendingFriendEventListRsp::operator !=(const GetPendingFriendEventListRsp &other) const
{
    return !this->operator ==(other);
}

QString GetPendingFriendEventListRsp::requestId() const
{
    return dptr->m_requestId;
}

bool GetPendingFriendEventListRsp::success() const
{
    return dptr->m_success;
}

QString GetPendingFriendEventListRsp::errmsg() const
{
    return dptr->m_errmsg;
}

FriendEventRepeated GetPendingFriendEventListRsp::event() const
{
    return dptr->m_event;
}

FriendEventRepeated &GetPendingFriendEventListRsp::event()
{
    dptr.detach();
    return dptr->m_event;
}

void GetPendingFriendEventListRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetPendingFriendEventListRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetPendingFriendEventListRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetPendingFriendEventListRsp::setEvent(const FriendEventRepeated &event)
{
    if (dptr->m_event != event) {
        dptr.detach();
        dptr->m_event = event;
    }
}


class FriendSearchReq_QtProtobufData : public QSharedData
{
public:
    FriendSearchReq_QtProtobufData()
        : QSharedData()
    {
    }

    FriendSearchReq_QtProtobufData(const FriendSearchReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_searchKey(other.m_searchKey),
          m_sessionId(other.m_sessionId),
          m_userId(other.m_userId)
    {
    }

    QString m_requestId;
    QString m_searchKey;
    QString m_sessionId;
    QString m_userId;
};

FriendSearchReq::~FriendSearchReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_FriendSearchReq_uint_data;
    const char qt_protobuf_FriendSearchReq_char_data[68];
} qt_protobuf_FriendSearchReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = searchKey */
        50, /* = sessionId */
        60, /* = userId */
        67, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = searchKey */
        3, /* = sessionId */
        4, /* = userId */
        // Property indices:
        0, /* = requestId */
        1, /* = searchKey */
        2, /* = sessionId */
        3, /* = userId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = searchKey */
        QtProtobufPrivate::NoFlags, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = userId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.FriendSearchReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0searchKey\0sessionId\0userId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering FriendSearchReq::propertyOrdering = {
    &qt_protobuf_FriendSearchReq_metadata.data
};

void FriendSearchReq::registerTypes()
{
    qRegisterMetaType<FriendSearchReq>();
    qRegisterMetaType<FriendSearchReqRepeated>();
}

FriendSearchReq::FriendSearchReq()
    : QProtobufMessage(&FriendSearchReq::staticMetaObject),
      dptr(new FriendSearchReq_QtProtobufData)
{
}

FriendSearchReq::FriendSearchReq(const FriendSearchReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
FriendSearchReq &FriendSearchReq::operator =(const FriendSearchReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
FriendSearchReq::FriendSearchReq(FriendSearchReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
FriendSearchReq &FriendSearchReq::operator =(FriendSearchReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool FriendSearchReq::operator ==(const FriendSearchReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_searchKey == other.dptr->m_searchKey;
}

bool FriendSearchReq::operator !=(const FriendSearchReq &other) const
{
    return !this->operator ==(other);
}

QString FriendSearchReq::requestId() const
{
    return dptr->m_requestId;
}

QString FriendSearchReq::searchKey() const
{
    return dptr->m_searchKey;
}

QString FriendSearchReq::sessionId() const
{
    return dptr->m_sessionId;
}

QString FriendSearchReq::userId() const
{
    return dptr->m_userId;
}

void FriendSearchReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void FriendSearchReq::setSearchKey(const QString &searchKey)
{
    if (dptr->m_searchKey != searchKey) {
        dptr.detach();
        dptr->m_searchKey = searchKey;
    }
}

void FriendSearchReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void FriendSearchReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}


class FriendSearchRsp_QtProtobufData : public QSharedData
{
public:
    FriendSearchRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    FriendSearchRsp_QtProtobufData(const FriendSearchRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_userInfo(other.m_userInfo)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    UserInfoRepeated m_userInfo;
};

FriendSearchRsp::~FriendSearchRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_FriendSearchRsp_uint_data;
    const char qt_protobuf_FriendSearchRsp_char_data[65];
} qt_protobuf_FriendSearchRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = success */
        48, /* = errmsg */
        55, /* = userInfo */
        64, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = userInfo */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = userInfo */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = userInfo */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.FriendSearchRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0userInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering FriendSearchRsp::propertyOrdering = {
    &qt_protobuf_FriendSearchRsp_metadata.data
};

void FriendSearchRsp::registerTypes()
{
    qRegisterMetaType<FriendSearchRsp>();
    qRegisterMetaType<FriendSearchRspRepeated>();
}

FriendSearchRsp::FriendSearchRsp()
    : QProtobufMessage(&FriendSearchRsp::staticMetaObject),
      dptr(new FriendSearchRsp_QtProtobufData)
{
}

FriendSearchRsp::FriendSearchRsp(const FriendSearchRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
FriendSearchRsp &FriendSearchRsp::operator =(const FriendSearchRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
FriendSearchRsp::FriendSearchRsp(FriendSearchRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
FriendSearchRsp &FriendSearchRsp::operator =(FriendSearchRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool FriendSearchRsp::operator ==(const FriendSearchRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && QtProtobuf::repeatedValueCompare(dptr->m_userInfo, other.dptr->m_userInfo);
}

bool FriendSearchRsp::operator !=(const FriendSearchRsp &other) const
{
    return !this->operator ==(other);
}

QString FriendSearchRsp::requestId() const
{
    return dptr->m_requestId;
}

bool FriendSearchRsp::success() const
{
    return dptr->m_success;
}

QString FriendSearchRsp::errmsg() const
{
    return dptr->m_errmsg;
}

UserInfoRepeated FriendSearchRsp::userInfo() const
{
    return dptr->m_userInfo;
}

UserInfoRepeated &FriendSearchRsp::userInfo()
{
    dptr.detach();
    return dptr->m_userInfo;
}

void FriendSearchRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void FriendSearchRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void FriendSearchRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void FriendSearchRsp::setUserInfo(const UserInfoRepeated &userInfo)
{
    if (dptr->m_userInfo != userInfo) {
        dptr.detach();
        dptr->m_userInfo = userInfo;
    }
}


class GetChatSessionListReq_QtProtobufData : public QSharedData
{
public:
    GetChatSessionListReq_QtProtobufData()
        : QSharedData()
    {
    }

    GetChatSessionListReq_QtProtobufData(const GetChatSessionListReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_sessionId(other.m_sessionId),
          m_userId(other.m_userId)
    {
    }

    QString m_requestId;
    QString m_sessionId;
    QString m_userId;
};

GetChatSessionListReq::~GetChatSessionListReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_GetChatSessionListReq_uint_data;
    const char qt_protobuf_GetChatSessionListReq_char_data[64];
} qt_protobuf_GetChatSessionListReq_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        35, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        36, /* = requestId */
        46, /* = sessionId */
        56, /* = userId */
        63, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = sessionId */
        3, /* = userId */
        // Property indices:
        0, /* = requestId */
        1, /* = sessionId */
        2, /* = userId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = userId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetChatSessionListReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0sessionId\0userId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetChatSessionListReq::propertyOrdering = {
    &qt_protobuf_GetChatSessionListReq_metadata.data
};

void GetChatSessionListReq::registerTypes()
{
    qRegisterMetaType<GetChatSessionListReq>();
    qRegisterMetaType<GetChatSessionListReqRepeated>();
}

GetChatSessionListReq::GetChatSessionListReq()
    : QProtobufMessage(&GetChatSessionListReq::staticMetaObject),
      dptr(new GetChatSessionListReq_QtProtobufData)
{
}

GetChatSessionListReq::GetChatSessionListReq(const GetChatSessionListReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetChatSessionListReq &GetChatSessionListReq::operator =(const GetChatSessionListReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetChatSessionListReq::GetChatSessionListReq(GetChatSessionListReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetChatSessionListReq &GetChatSessionListReq::operator =(GetChatSessionListReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetChatSessionListReq::operator ==(const GetChatSessionListReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId;
}

bool GetChatSessionListReq::operator !=(const GetChatSessionListReq &other) const
{
    return !this->operator ==(other);
}

QString GetChatSessionListReq::requestId() const
{
    return dptr->m_requestId;
}

QString GetChatSessionListReq::sessionId() const
{
    return dptr->m_sessionId;
}

QString GetChatSessionListReq::userId() const
{
    return dptr->m_userId;
}

void GetChatSessionListReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetChatSessionListReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetChatSessionListReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}


class GetChatSessionListRsp_QtProtobufData : public QSharedData
{
public:
    GetChatSessionListRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    GetChatSessionListRsp_QtProtobufData(const GetChatSessionListRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_chatSessionInfoList(other.m_chatSessionInfoList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    ChatSessionInfoRepeated m_chatSessionInfoList;
};

GetChatSessionListRsp::~GetChatSessionListRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetChatSessionListRsp_uint_data;
    const char qt_protobuf_GetChatSessionListRsp_char_data[82];
} qt_protobuf_GetChatSessionListRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        35, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        36, /* = requestId */
        46, /* = success */
        54, /* = errmsg */
        61, /* = chatSessionInfoList */
        81, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = chatSessionInfoList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = chatSessionInfoList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = chatSessionInfoList */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetChatSessionListRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0chatSessionInfoList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetChatSessionListRsp::propertyOrdering = {
    &qt_protobuf_GetChatSessionListRsp_metadata.data
};

void GetChatSessionListRsp::registerTypes()
{
    qRegisterMetaType<GetChatSessionListRsp>();
    qRegisterMetaType<GetChatSessionListRspRepeated>();
}

GetChatSessionListRsp::GetChatSessionListRsp()
    : QProtobufMessage(&GetChatSessionListRsp::staticMetaObject),
      dptr(new GetChatSessionListRsp_QtProtobufData)
{
}

GetChatSessionListRsp::GetChatSessionListRsp(const GetChatSessionListRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetChatSessionListRsp &GetChatSessionListRsp::operator =(const GetChatSessionListRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetChatSessionListRsp::GetChatSessionListRsp(GetChatSessionListRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetChatSessionListRsp &GetChatSessionListRsp::operator =(GetChatSessionListRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetChatSessionListRsp::operator ==(const GetChatSessionListRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && QtProtobuf::repeatedValueCompare(dptr->m_chatSessionInfoList, other.dptr->m_chatSessionInfoList);
}

bool GetChatSessionListRsp::operator !=(const GetChatSessionListRsp &other) const
{
    return !this->operator ==(other);
}

QString GetChatSessionListRsp::requestId() const
{
    return dptr->m_requestId;
}

bool GetChatSessionListRsp::success() const
{
    return dptr->m_success;
}

QString GetChatSessionListRsp::errmsg() const
{
    return dptr->m_errmsg;
}

ChatSessionInfoRepeated GetChatSessionListRsp::chatSessionInfoList() const
{
    return dptr->m_chatSessionInfoList;
}

ChatSessionInfoRepeated &GetChatSessionListRsp::chatSessionInfoList()
{
    dptr.detach();
    return dptr->m_chatSessionInfoList;
}

void GetChatSessionListRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetChatSessionListRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetChatSessionListRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetChatSessionListRsp::setChatSessionInfoList(const ChatSessionInfoRepeated &chatSessionInfoList)
{
    if (dptr->m_chatSessionInfoList != chatSessionInfoList) {
        dptr.detach();
        dptr->m_chatSessionInfoList = chatSessionInfoList;
    }
}


class ChatSessionCreateReq_QtProtobufData : public QSharedData
{
public:
    ChatSessionCreateReq_QtProtobufData()
        : QSharedData()
    {
    }

    ChatSessionCreateReq_QtProtobufData(const ChatSessionCreateReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_sessionId(other.m_sessionId),
          m_userId(other.m_userId),
          m_chatSessionName(other.m_chatSessionName),
          m_memberIdList(other.m_memberIdList)
    {
    }

    QString m_requestId;
    QString m_sessionId;
    QString m_userId;
    QString m_chatSessionName;
    QStringList m_memberIdList;
};

ChatSessionCreateReq::~ChatSessionCreateReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 21> qt_protobuf_ChatSessionCreateReq_uint_data;
    const char qt_protobuf_ChatSessionCreateReq_char_data[92];
} qt_protobuf_ChatSessionCreateReq_metadata {
    // data
    {
        0, /* = version */
        5, /* = num fields */
        6, /* = field number offset */
        11, /* = property index offset */
        16, /* = field flags offset */
        34, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        35, /* = requestId */
        45, /* = sessionId */
        55, /* = userId */
        62, /* = chatSessionName */
        78, /* = memberIdList */
        91, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = sessionId */
        3, /* = userId */
        4, /* = chatSessionName */
        5, /* = memberIdList */
        // Property indices:
        0, /* = requestId */
        1, /* = sessionId */
        2, /* = userId */
        3, /* = chatSessionName */
        4, /* = memberIdList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = userId */
        QtProtobufPrivate::NoFlags, /* = chatSessionName */
        QtProtobufPrivate::NoFlags, /* = memberIdList */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.ChatSessionCreateReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0sessionId\0userId\0chatSessionName\0memberIdList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering ChatSessionCreateReq::propertyOrdering = {
    &qt_protobuf_ChatSessionCreateReq_metadata.data
};

void ChatSessionCreateReq::registerTypes()
{
    qRegisterMetaType<ChatSessionCreateReq>();
    qRegisterMetaType<ChatSessionCreateReqRepeated>();
}

ChatSessionCreateReq::ChatSessionCreateReq()
    : QProtobufMessage(&ChatSessionCreateReq::staticMetaObject),
      dptr(new ChatSessionCreateReq_QtProtobufData)
{
}

ChatSessionCreateReq::ChatSessionCreateReq(const ChatSessionCreateReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
ChatSessionCreateReq &ChatSessionCreateReq::operator =(const ChatSessionCreateReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
ChatSessionCreateReq::ChatSessionCreateReq(ChatSessionCreateReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
ChatSessionCreateReq &ChatSessionCreateReq::operator =(ChatSessionCreateReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool ChatSessionCreateReq::operator ==(const ChatSessionCreateReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_chatSessionName == other.dptr->m_chatSessionName
        && dptr->m_memberIdList == other.dptr->m_memberIdList;
}

bool ChatSessionCreateReq::operator !=(const ChatSessionCreateReq &other) const
{
    return !this->operator ==(other);
}

QString ChatSessionCreateReq::requestId() const
{
    return dptr->m_requestId;
}

QString ChatSessionCreateReq::sessionId() const
{
    return dptr->m_sessionId;
}

QString ChatSessionCreateReq::userId() const
{
    return dptr->m_userId;
}

QString ChatSessionCreateReq::chatSessionName() const
{
    return dptr->m_chatSessionName;
}

QStringList ChatSessionCreateReq::memberIdList() const
{
    return dptr->m_memberIdList;
}

QStringList &ChatSessionCreateReq::memberIdList()
{
    dptr.detach();
    return dptr->m_memberIdList;
}

void ChatSessionCreateReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void ChatSessionCreateReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void ChatSessionCreateReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void ChatSessionCreateReq::setChatSessionName(const QString &chatSessionName)
{
    if (dptr->m_chatSessionName != chatSessionName) {
        dptr.detach();
        dptr->m_chatSessionName = chatSessionName;
    }
}

void ChatSessionCreateReq::setMemberIdList(const QStringList &memberIdList)
{
    if (dptr->m_memberIdList != memberIdList) {
        dptr.detach();
        dptr->m_memberIdList = memberIdList;
    }
}


class ChatSessionCreateRsp_QtProtobufData : public QSharedData
{
public:
    ChatSessionCreateRsp_QtProtobufData()
        : QSharedData(),
          m_success(false),
          m_chatSessionInfo(nullptr)
    {
    }

    ChatSessionCreateRsp_QtProtobufData(const ChatSessionCreateRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_chatSessionInfo(other.m_chatSessionInfo
                                               ? new ChatSessionInfo(*other.m_chatSessionInfo)
                                               : nullptr)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QtProtobufPrivate::QProtobufLazyMessagePointer<ChatSessionInfo> m_chatSessionInfo;
};

ChatSessionCreateRsp::~ChatSessionCreateRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_ChatSessionCreateRsp_uint_data;
    const char qt_protobuf_ChatSessionCreateRsp_char_data[77];
} qt_protobuf_ChatSessionCreateRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        34, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        35, /* = requestId */
        45, /* = success */
        53, /* = errmsg */
        60, /* = chatSessionInfo */
        76, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = chatSessionInfo */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = chatSessionInfo */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = chatSessionInfo */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.ChatSessionCreateRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0chatSessionInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering ChatSessionCreateRsp::propertyOrdering = {
    &qt_protobuf_ChatSessionCreateRsp_metadata.data
};

void ChatSessionCreateRsp::registerTypes()
{
    qRegisterMetaType<ChatSessionCreateRsp>();
    qRegisterMetaType<ChatSessionCreateRspRepeated>();
}

ChatSessionCreateRsp::ChatSessionCreateRsp()
    : QProtobufMessage(&ChatSessionCreateRsp::staticMetaObject),
      dptr(new ChatSessionCreateRsp_QtProtobufData)
{
}

ChatSessionCreateRsp::ChatSessionCreateRsp(const ChatSessionCreateRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
ChatSessionCreateRsp &ChatSessionCreateRsp::operator =(const ChatSessionCreateRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
ChatSessionCreateRsp::ChatSessionCreateRsp(ChatSessionCreateRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
ChatSessionCreateRsp &ChatSessionCreateRsp::operator =(ChatSessionCreateRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool ChatSessionCreateRsp::operator ==(const ChatSessionCreateRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool ChatSessionCreateRsp::operator !=(const ChatSessionCreateRsp &other) const
{
    return !this->operator ==(other);
}

QString ChatSessionCreateRsp::requestId() const
{
    return dptr->m_requestId;
}

bool ChatSessionCreateRsp::success() const
{
    return dptr->m_success;
}

QString ChatSessionCreateRsp::errmsg() const
{
    return dptr->m_errmsg;
}

ChatSessionInfo *ChatSessionCreateRsp::chatSessionInfo_p() const
{
    return dptr->m_chatSessionInfo ? dptr->m_chatSessionInfo.get() : nullptr;
}

ChatSessionInfo &ChatSessionCreateRsp::chatSessionInfo() const
{
    return *dptr->m_chatSessionInfo;
}

void ChatSessionCreateRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void ChatSessionCreateRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void ChatSessionCreateRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void ChatSessionCreateRsp::setChatSessionInfo_p(ChatSessionInfo *chatSessionInfo)
{
    if (dptr->m_chatSessionInfo.get() != chatSessionInfo) {
        dptr.detach();
        dptr->m_chatSessionInfo.reset(chatSessionInfo);
    }
}

void ChatSessionCreateRsp::setChatSessionInfo(const ChatSessionInfo &chatSessionInfo)
{
    if (*dptr->m_chatSessionInfo != chatSessionInfo) {
        dptr.detach();
        *dptr->m_chatSessionInfo = chatSessionInfo;
    }
}


class GetChatSessionMemberReq_QtProtobufData : public QSharedData
{
public:
    GetChatSessionMemberReq_QtProtobufData()
        : QSharedData()
    {
    }

    GetChatSessionMemberReq_QtProtobufData(const GetChatSessionMemberReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_sessionId(other.m_sessionId),
          m_userId(other.m_userId),
          m_chatSessionId(other.m_chatSessionId)
    {
    }

    QString m_requestId;
    QString m_sessionId;
    QString m_userId;
    QString m_chatSessionId;
};

GetChatSessionMemberReq::~GetChatSessionMemberReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetChatSessionMemberReq_uint_data;
    const char qt_protobuf_GetChatSessionMemberReq_char_data[80];
} qt_protobuf_GetChatSessionMemberReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        37, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        38, /* = requestId */
        48, /* = sessionId */
        58, /* = userId */
        65, /* = chatSessionId */
        79, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = sessionId */
        3, /* = userId */
        4, /* = chatSessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = sessionId */
        2, /* = userId */
        3, /* = chatSessionId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = userId */
        QtProtobufPrivate::NoFlags, /* = chatSessionId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetChatSessionMemberReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0sessionId\0userId\0chatSessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetChatSessionMemberReq::propertyOrdering = {
    &qt_protobuf_GetChatSessionMemberReq_metadata.data
};

void GetChatSessionMemberReq::registerTypes()
{
    qRegisterMetaType<GetChatSessionMemberReq>();
    qRegisterMetaType<GetChatSessionMemberReqRepeated>();
}

GetChatSessionMemberReq::GetChatSessionMemberReq()
    : QProtobufMessage(&GetChatSessionMemberReq::staticMetaObject),
      dptr(new GetChatSessionMemberReq_QtProtobufData)
{
}

GetChatSessionMemberReq::GetChatSessionMemberReq(const GetChatSessionMemberReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetChatSessionMemberReq &GetChatSessionMemberReq::operator =(const GetChatSessionMemberReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetChatSessionMemberReq::GetChatSessionMemberReq(GetChatSessionMemberReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetChatSessionMemberReq &GetChatSessionMemberReq::operator =(GetChatSessionMemberReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetChatSessionMemberReq::operator ==(const GetChatSessionMemberReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_chatSessionId == other.dptr->m_chatSessionId;
}

bool GetChatSessionMemberReq::operator !=(const GetChatSessionMemberReq &other) const
{
    return !this->operator ==(other);
}

QString GetChatSessionMemberReq::requestId() const
{
    return dptr->m_requestId;
}

QString GetChatSessionMemberReq::sessionId() const
{
    return dptr->m_sessionId;
}

QString GetChatSessionMemberReq::userId() const
{
    return dptr->m_userId;
}

QString GetChatSessionMemberReq::chatSessionId() const
{
    return dptr->m_chatSessionId;
}

void GetChatSessionMemberReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetChatSessionMemberReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetChatSessionMemberReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetChatSessionMemberReq::setChatSessionId(const QString &chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = chatSessionId;
    }
}


class GetChatSessionMemberRsp_QtProtobufData : public QSharedData
{
public:
    GetChatSessionMemberRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    GetChatSessionMemberRsp_QtProtobufData(const GetChatSessionMemberRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_memberInfoList(other.m_memberInfoList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    UserInfoRepeated m_memberInfoList;
};

GetChatSessionMemberRsp::~GetChatSessionMemberRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetChatSessionMemberRsp_uint_data;
    const char qt_protobuf_GetChatSessionMemberRsp_char_data[79];
} qt_protobuf_GetChatSessionMemberRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        37, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        38, /* = requestId */
        48, /* = success */
        56, /* = errmsg */
        63, /* = memberInfoList */
        78, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = memberInfoList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = memberInfoList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = memberInfoList */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetChatSessionMemberRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0memberInfoList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetChatSessionMemberRsp::propertyOrdering = {
    &qt_protobuf_GetChatSessionMemberRsp_metadata.data
};

void GetChatSessionMemberRsp::registerTypes()
{
    qRegisterMetaType<GetChatSessionMemberRsp>();
    qRegisterMetaType<GetChatSessionMemberRspRepeated>();
}

GetChatSessionMemberRsp::GetChatSessionMemberRsp()
    : QProtobufMessage(&GetChatSessionMemberRsp::staticMetaObject),
      dptr(new GetChatSessionMemberRsp_QtProtobufData)
{
}

GetChatSessionMemberRsp::GetChatSessionMemberRsp(const GetChatSessionMemberRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetChatSessionMemberRsp &GetChatSessionMemberRsp::operator =(const GetChatSessionMemberRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetChatSessionMemberRsp::GetChatSessionMemberRsp(GetChatSessionMemberRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetChatSessionMemberRsp &GetChatSessionMemberRsp::operator =(GetChatSessionMemberRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetChatSessionMemberRsp::operator ==(const GetChatSessionMemberRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && QtProtobuf::repeatedValueCompare(dptr->m_memberInfoList, other.dptr->m_memberInfoList);
}

bool GetChatSessionMemberRsp::operator !=(const GetChatSessionMemberRsp &other) const
{
    return !this->operator ==(other);
}

QString GetChatSessionMemberRsp::requestId() const
{
    return dptr->m_requestId;
}

bool GetChatSessionMemberRsp::success() const
{
    return dptr->m_success;
}

QString GetChatSessionMemberRsp::errmsg() const
{
    return dptr->m_errmsg;
}

UserInfoRepeated GetChatSessionMemberRsp::memberInfoList() const
{
    return dptr->m_memberInfoList;
}

UserInfoRepeated &GetChatSessionMemberRsp::memberInfoList()
{
    dptr.detach();
    return dptr->m_memberInfoList;
}

void GetChatSessionMemberRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetChatSessionMemberRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetChatSessionMemberRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetChatSessionMemberRsp::setMemberInfoList(const UserInfoRepeated &memberInfoList)
{
    if (dptr->m_memberInfoList != memberInfoList) {
        dptr.detach();
        dptr->m_memberInfoList = memberInfoList;
    }
}

} // namespace my_chat_proto

#include "moc_friend.qpb.cpp"
