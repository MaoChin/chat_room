/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "message_storage.qpb.h"
#include <QtProtobuf/qprotobufserializer.h>

namespace my_chat_proto {

class GetHistoryMsgReq_QtProtobufData : public QSharedData
{
public:
    GetHistoryMsgReq_QtProtobufData()
        : QSharedData(),
          m_startTime(0),
          m_overTime(0)
    {
    }

    GetHistoryMsgReq_QtProtobufData(const GetHistoryMsgReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_chatSessionId(other.m_chatSessionId),
          m_startTime(other.m_startTime),
          m_overTime(other.m_overTime),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId)
    {
    }

    QString m_requestId;
    QString m_chatSessionId;
    QtProtobuf::int64 m_startTime;
    QtProtobuf::int64 m_overTime;
    QString m_userId;
    QString m_sessionId;
};

GetHistoryMsgReq::~GetHistoryMsgReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 25> qt_protobuf_GetHistoryMsgReq_uint_data;
    const char qt_protobuf_GetHistoryMsgReq_char_data[92];
} qt_protobuf_GetHistoryMsgReq_metadata {
    // data
    {
        0, /* = version */
        6, /* = num fields */
        7, /* = field number offset */
        13, /* = property index offset */
        19, /* = field flags offset */
        30, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        31, /* = requestId */
        41, /* = chatSessionId */
        55, /* = startTime */
        65, /* = overTime */
        74, /* = userId */
        81, /* = sessionId */
        91, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = chatSessionId */
        3, /* = startTime */
        4, /* = overTime */
        5, /* = userId */
        6, /* = sessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = chatSessionId */
        2, /* = startTime */
        3, /* = overTime */
        4, /* = userId */
        5, /* = sessionId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = chatSessionId */
        QtProtobufPrivate::NoFlags, /* = startTime */
        QtProtobufPrivate::NoFlags, /* = overTime */
        QtProtobufPrivate::NoFlags, /* = userId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetHistoryMsgReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0chatSessionId\0startTime\0overTime\0userId\0"
    "sessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetHistoryMsgReq::propertyOrdering = {
    &qt_protobuf_GetHistoryMsgReq_metadata.data
};

void GetHistoryMsgReq::registerTypes()
{
    qRegisterMetaType<GetHistoryMsgReq>();
    qRegisterMetaType<GetHistoryMsgReqRepeated>();
}

GetHistoryMsgReq::GetHistoryMsgReq()
    : QProtobufMessage(&GetHistoryMsgReq::staticMetaObject),
      dptr(new GetHistoryMsgReq_QtProtobufData)
{
}

GetHistoryMsgReq::GetHistoryMsgReq(const GetHistoryMsgReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetHistoryMsgReq &GetHistoryMsgReq::operator =(const GetHistoryMsgReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetHistoryMsgReq::GetHistoryMsgReq(GetHistoryMsgReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetHistoryMsgReq &GetHistoryMsgReq::operator =(GetHistoryMsgReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetHistoryMsgReq::operator ==(const GetHistoryMsgReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_chatSessionId == other.dptr->m_chatSessionId
        && dptr->m_startTime == other.dptr->m_startTime
        && dptr->m_overTime == other.dptr->m_overTime;
}

bool GetHistoryMsgReq::operator !=(const GetHistoryMsgReq &other) const
{
    return !this->operator ==(other);
}

QString GetHistoryMsgReq::requestId() const
{
    return dptr->m_requestId;
}

QString GetHistoryMsgReq::chatSessionId() const
{
    return dptr->m_chatSessionId;
}

QtProtobuf::int64 GetHistoryMsgReq::startTime() const
{
    return dptr->m_startTime;
}

QtProtobuf::int64 GetHistoryMsgReq::overTime() const
{
    return dptr->m_overTime;
}

QString GetHistoryMsgReq::userId() const
{
    return dptr->m_userId;
}

QString GetHistoryMsgReq::sessionId() const
{
    return dptr->m_sessionId;
}

void GetHistoryMsgReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetHistoryMsgReq::setChatSessionId(const QString &chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = chatSessionId;
    }
}

void GetHistoryMsgReq::setStartTime(const QtProtobuf::int64 &startTime)
{
    if (dptr->m_startTime != startTime) {
        dptr.detach();
        dptr->m_startTime = startTime;
    }
}

void GetHistoryMsgReq::setOverTime(const QtProtobuf::int64 &overTime)
{
    if (dptr->m_overTime != overTime) {
        dptr.detach();
        dptr->m_overTime = overTime;
    }
}

void GetHistoryMsgReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetHistoryMsgReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}


class GetHistoryMsgRsp_QtProtobufData : public QSharedData
{
public:
    GetHistoryMsgRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    GetHistoryMsgRsp_QtProtobufData(const GetHistoryMsgRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_msgList(other.m_msgList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    MessageInfoRepeated m_msgList;
};

GetHistoryMsgRsp::~GetHistoryMsgRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetHistoryMsgRsp_uint_data;
    const char qt_protobuf_GetHistoryMsgRsp_char_data[65];
} qt_protobuf_GetHistoryMsgRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        30, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        31, /* = requestId */
        41, /* = success */
        49, /* = errmsg */
        56, /* = msgList */
        64, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = msgList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = msgList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = msgList */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetHistoryMsgRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0msgList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetHistoryMsgRsp::propertyOrdering = {
    &qt_protobuf_GetHistoryMsgRsp_metadata.data
};

void GetHistoryMsgRsp::registerTypes()
{
    qRegisterMetaType<GetHistoryMsgRsp>();
    qRegisterMetaType<GetHistoryMsgRspRepeated>();
}

GetHistoryMsgRsp::GetHistoryMsgRsp()
    : QProtobufMessage(&GetHistoryMsgRsp::staticMetaObject),
      dptr(new GetHistoryMsgRsp_QtProtobufData)
{
}

GetHistoryMsgRsp::GetHistoryMsgRsp(const GetHistoryMsgRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetHistoryMsgRsp &GetHistoryMsgRsp::operator =(const GetHistoryMsgRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetHistoryMsgRsp::GetHistoryMsgRsp(GetHistoryMsgRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetHistoryMsgRsp &GetHistoryMsgRsp::operator =(GetHistoryMsgRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetHistoryMsgRsp::operator ==(const GetHistoryMsgRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && QtProtobuf::repeatedValueCompare(dptr->m_msgList, other.dptr->m_msgList);
}

bool GetHistoryMsgRsp::operator !=(const GetHistoryMsgRsp &other) const
{
    return !this->operator ==(other);
}

QString GetHistoryMsgRsp::requestId() const
{
    return dptr->m_requestId;
}

bool GetHistoryMsgRsp::success() const
{
    return dptr->m_success;
}

QString GetHistoryMsgRsp::errmsg() const
{
    return dptr->m_errmsg;
}

MessageInfoRepeated GetHistoryMsgRsp::msgList() const
{
    return dptr->m_msgList;
}

MessageInfoRepeated &GetHistoryMsgRsp::msgList()
{
    dptr.detach();
    return dptr->m_msgList;
}

void GetHistoryMsgRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetHistoryMsgRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetHistoryMsgRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetHistoryMsgRsp::setMsgList(const MessageInfoRepeated &msgList)
{
    if (dptr->m_msgList != msgList) {
        dptr.detach();
        dptr->m_msgList = msgList;
    }
}


class GetRecentMsgReq_QtProtobufData : public QSharedData
{
public:
    GetRecentMsgReq_QtProtobufData()
        : QSharedData(),
          m_msgCount(0),
          m_curTime(0)
    {
    }

    GetRecentMsgReq_QtProtobufData(const GetRecentMsgReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_chatSessionId(other.m_chatSessionId),
          m_msgCount(other.m_msgCount),
          m_curTime(other.m_curTime),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId)
    {
    }

    QString m_requestId;
    QString m_chatSessionId;
    QtProtobuf::int64 m_msgCount;
    QtProtobuf::int64 m_curTime;
    QString m_userId;
    QString m_sessionId;
};

GetRecentMsgReq::~GetRecentMsgReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 25> qt_protobuf_GetRecentMsgReq_uint_data;
    const char qt_protobuf_GetRecentMsgReq_char_data[89];
} qt_protobuf_GetRecentMsgReq_metadata {
    // data
    {
        0, /* = version */
        6, /* = num fields */
        7, /* = field number offset */
        13, /* = property index offset */
        19, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = chatSessionId */
        54, /* = msgCount */
        63, /* = curTime */
        71, /* = userId */
        78, /* = sessionId */
        88, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = chatSessionId */
        3, /* = msgCount */
        4, /* = curTime */
        5, /* = userId */
        6, /* = sessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = chatSessionId */
        2, /* = msgCount */
        3, /* = curTime */
        4, /* = userId */
        5, /* = sessionId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = chatSessionId */
        QtProtobufPrivate::NoFlags, /* = msgCount */
        QtProtobufPrivate::NoFlags, /* = curTime */
        QtProtobufPrivate::NoFlags, /* = userId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetRecentMsgReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0chatSessionId\0msgCount\0curTime\0userId\0"
    "sessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetRecentMsgReq::propertyOrdering = {
    &qt_protobuf_GetRecentMsgReq_metadata.data
};

void GetRecentMsgReq::registerTypes()
{
    qRegisterMetaType<GetRecentMsgReq>();
    qRegisterMetaType<GetRecentMsgReqRepeated>();
}

GetRecentMsgReq::GetRecentMsgReq()
    : QProtobufMessage(&GetRecentMsgReq::staticMetaObject),
      dptr(new GetRecentMsgReq_QtProtobufData)
{
}

GetRecentMsgReq::GetRecentMsgReq(const GetRecentMsgReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetRecentMsgReq &GetRecentMsgReq::operator =(const GetRecentMsgReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetRecentMsgReq::GetRecentMsgReq(GetRecentMsgReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetRecentMsgReq &GetRecentMsgReq::operator =(GetRecentMsgReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetRecentMsgReq::operator ==(const GetRecentMsgReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_chatSessionId == other.dptr->m_chatSessionId
        && dptr->m_msgCount == other.dptr->m_msgCount;
}

bool GetRecentMsgReq::operator !=(const GetRecentMsgReq &other) const
{
    return !this->operator ==(other);
}

QString GetRecentMsgReq::requestId() const
{
    return dptr->m_requestId;
}

QString GetRecentMsgReq::chatSessionId() const
{
    return dptr->m_chatSessionId;
}

QtProtobuf::int64 GetRecentMsgReq::msgCount() const
{
    return dptr->m_msgCount;
}

QtProtobuf::int64 GetRecentMsgReq::curTime() const
{
    return dptr->m_curTime;
}

QString GetRecentMsgReq::userId() const
{
    return dptr->m_userId;
}

QString GetRecentMsgReq::sessionId() const
{
    return dptr->m_sessionId;
}

void GetRecentMsgReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetRecentMsgReq::setChatSessionId(const QString &chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = chatSessionId;
    }
}

void GetRecentMsgReq::setMsgCount(const QtProtobuf::int64 &msgCount)
{
    if (dptr->m_msgCount != msgCount) {
        dptr.detach();
        dptr->m_msgCount = msgCount;
    }
}

void GetRecentMsgReq::setCurTime(const QtProtobuf::int64 &curTime)
{
    if (dptr->m_curTime != curTime) {
        dptr.detach();
        dptr->m_curTime = curTime;
    }
}

void GetRecentMsgReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetRecentMsgReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}


class GetRecentMsgRsp_QtProtobufData : public QSharedData
{
public:
    GetRecentMsgRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    GetRecentMsgRsp_QtProtobufData(const GetRecentMsgRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_msgList(other.m_msgList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    MessageInfoRepeated m_msgList;
};

GetRecentMsgRsp::~GetRecentMsgRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetRecentMsgRsp_uint_data;
    const char qt_protobuf_GetRecentMsgRsp_char_data[64];
} qt_protobuf_GetRecentMsgRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = success */
        48, /* = errmsg */
        55, /* = msgList */
        63, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = msgList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = msgList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = msgList */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.GetRecentMsgRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0msgList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetRecentMsgRsp::propertyOrdering = {
    &qt_protobuf_GetRecentMsgRsp_metadata.data
};

void GetRecentMsgRsp::registerTypes()
{
    qRegisterMetaType<GetRecentMsgRsp>();
    qRegisterMetaType<GetRecentMsgRspRepeated>();
}

GetRecentMsgRsp::GetRecentMsgRsp()
    : QProtobufMessage(&GetRecentMsgRsp::staticMetaObject),
      dptr(new GetRecentMsgRsp_QtProtobufData)
{
}

GetRecentMsgRsp::GetRecentMsgRsp(const GetRecentMsgRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetRecentMsgRsp &GetRecentMsgRsp::operator =(const GetRecentMsgRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetRecentMsgRsp::GetRecentMsgRsp(GetRecentMsgRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetRecentMsgRsp &GetRecentMsgRsp::operator =(GetRecentMsgRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetRecentMsgRsp::operator ==(const GetRecentMsgRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && QtProtobuf::repeatedValueCompare(dptr->m_msgList, other.dptr->m_msgList);
}

bool GetRecentMsgRsp::operator !=(const GetRecentMsgRsp &other) const
{
    return !this->operator ==(other);
}

QString GetRecentMsgRsp::requestId() const
{
    return dptr->m_requestId;
}

bool GetRecentMsgRsp::success() const
{
    return dptr->m_success;
}

QString GetRecentMsgRsp::errmsg() const
{
    return dptr->m_errmsg;
}

MessageInfoRepeated GetRecentMsgRsp::msgList() const
{
    return dptr->m_msgList;
}

MessageInfoRepeated &GetRecentMsgRsp::msgList()
{
    dptr.detach();
    return dptr->m_msgList;
}

void GetRecentMsgRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetRecentMsgRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetRecentMsgRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetRecentMsgRsp::setMsgList(const MessageInfoRepeated &msgList)
{
    if (dptr->m_msgList != msgList) {
        dptr.detach();
        dptr->m_msgList = msgList;
    }
}


class MsgSearchReq_QtProtobufData : public QSharedData
{
public:
    MsgSearchReq_QtProtobufData()
        : QSharedData()
    {
    }

    MsgSearchReq_QtProtobufData(const MsgSearchReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_chatSessionId(other.m_chatSessionId),
          m_searchKey(other.m_searchKey)
    {
    }

    QString m_requestId;
    QString m_userId;
    QString m_sessionId;
    QString m_chatSessionId;
    QString m_searchKey;
};

MsgSearchReq::~MsgSearchReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 21> qt_protobuf_MsgSearchReq_uint_data;
    const char qt_protobuf_MsgSearchReq_char_data[79];
} qt_protobuf_MsgSearchReq_metadata {
    // data
    {
        0, /* = version */
        5, /* = num fields */
        6, /* = field number offset */
        11, /* = property index offset */
        16, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = requestId */
        37, /* = userId */
        44, /* = sessionId */
        54, /* = chatSessionId */
        68, /* = searchKey */
        78, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = chatSessionId */
        5, /* = searchKey */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        2, /* = sessionId */
        3, /* = chatSessionId */
        4, /* = searchKey */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = userId */
        QtProtobufPrivate::NoFlags, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = chatSessionId */
        QtProtobufPrivate::NoFlags, /* = searchKey */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.MsgSearchReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0chatSessionId\0searchKey\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering MsgSearchReq::propertyOrdering = {
    &qt_protobuf_MsgSearchReq_metadata.data
};

void MsgSearchReq::registerTypes()
{
    qRegisterMetaType<MsgSearchReq>();
    qRegisterMetaType<MsgSearchReqRepeated>();
}

MsgSearchReq::MsgSearchReq()
    : QProtobufMessage(&MsgSearchReq::staticMetaObject),
      dptr(new MsgSearchReq_QtProtobufData)
{
}

MsgSearchReq::MsgSearchReq(const MsgSearchReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
MsgSearchReq &MsgSearchReq::operator =(const MsgSearchReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
MsgSearchReq::MsgSearchReq(MsgSearchReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
MsgSearchReq &MsgSearchReq::operator =(MsgSearchReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool MsgSearchReq::operator ==(const MsgSearchReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_chatSessionId == other.dptr->m_chatSessionId
        && dptr->m_searchKey == other.dptr->m_searchKey;
}

bool MsgSearchReq::operator !=(const MsgSearchReq &other) const
{
    return !this->operator ==(other);
}

QString MsgSearchReq::requestId() const
{
    return dptr->m_requestId;
}

QString MsgSearchReq::userId() const
{
    return dptr->m_userId;
}

QString MsgSearchReq::sessionId() const
{
    return dptr->m_sessionId;
}

QString MsgSearchReq::chatSessionId() const
{
    return dptr->m_chatSessionId;
}

QString MsgSearchReq::searchKey() const
{
    return dptr->m_searchKey;
}

void MsgSearchReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void MsgSearchReq::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void MsgSearchReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void MsgSearchReq::setChatSessionId(const QString &chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = chatSessionId;
    }
}

void MsgSearchReq::setSearchKey(const QString &searchKey)
{
    if (dptr->m_searchKey != searchKey) {
        dptr.detach();
        dptr->m_searchKey = searchKey;
    }
}


class MsgSearchRsp_QtProtobufData : public QSharedData
{
public:
    MsgSearchRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    MsgSearchRsp_QtProtobufData(const MsgSearchRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_msgList(other.m_msgList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    MessageInfoRepeated m_msgList;
};

MsgSearchRsp::~MsgSearchRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_MsgSearchRsp_uint_data;
    const char qt_protobuf_MsgSearchRsp_char_data[61];
} qt_protobuf_MsgSearchRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = requestId */
        37, /* = success */
        45, /* = errmsg */
        52, /* = msgList */
        60, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = msgList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = msgList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = msgList */
    },
    // char_data
    /* metadata char_data: */
    "my_chat_proto.MsgSearchRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0msgList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering MsgSearchRsp::propertyOrdering = {
    &qt_protobuf_MsgSearchRsp_metadata.data
};

void MsgSearchRsp::registerTypes()
{
    qRegisterMetaType<MsgSearchRsp>();
    qRegisterMetaType<MsgSearchRspRepeated>();
}

MsgSearchRsp::MsgSearchRsp()
    : QProtobufMessage(&MsgSearchRsp::staticMetaObject),
      dptr(new MsgSearchRsp_QtProtobufData)
{
}

MsgSearchRsp::MsgSearchRsp(const MsgSearchRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
MsgSearchRsp &MsgSearchRsp::operator =(const MsgSearchRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
MsgSearchRsp::MsgSearchRsp(MsgSearchRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
MsgSearchRsp &MsgSearchRsp::operator =(MsgSearchRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool MsgSearchRsp::operator ==(const MsgSearchRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && QtProtobuf::repeatedValueCompare(dptr->m_msgList, other.dptr->m_msgList);
}

bool MsgSearchRsp::operator !=(const MsgSearchRsp &other) const
{
    return !this->operator ==(other);
}

QString MsgSearchRsp::requestId() const
{
    return dptr->m_requestId;
}

bool MsgSearchRsp::success() const
{
    return dptr->m_success;
}

QString MsgSearchRsp::errmsg() const
{
    return dptr->m_errmsg;
}

MessageInfoRepeated MsgSearchRsp::msgList() const
{
    return dptr->m_msgList;
}

MessageInfoRepeated &MsgSearchRsp::msgList()
{
    dptr.detach();
    return dptr->m_msgList;
}

void MsgSearchRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void MsgSearchRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void MsgSearchRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void MsgSearchRsp::setMsgList(const MessageInfoRepeated &msgList)
{
    if (dptr->m_msgList != msgList) {
        dptr.detach();
        dptr->m_msgList = msgList;
    }
}

} // namespace my_chat_proto

#include "moc_message_storage.qpb.cpp"
